name: Build and Release APK

on:
    push:
        tags:
            - "v*"
    pull_request:
        branches: [main]
    workflow_dispatch:

env:
    GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"

jobs:
    build-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"

            - name: Cache Gradle dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Make scripts executable
              run: |
                  chmod +x gradlew
                  chmod +x download-agent.sh

            - name: Download agent binaries for all architectures
              run: |
                  echo "Downloading Nezha Agent binaries..."
                  echo "Downloading ARM64 binary..."
                  ./download-agent.sh nezha arm64
                  echo "Downloading ARM32 binary..."
                  ./download-agent.sh nezha arm
                  echo "Downloading X86_64 binary..."
                  ./download-agent.sh nezha amd64
                  echo "Downloading X86 binary..."
                  ./download-agent.sh nezha 386

                  echo "Downloading Komari Agent binaries..."
                  echo "Downloading ARM64 binary..."
                  ./download-agent.sh komari arm64
                  echo "Downloading ARM32 binary..."
                  ./download-agent.sh komari arm
                  echo "Downloading X86_64 binary..."
                  ./download-agent.sh komari amd64
                  echo "Downloading X86 binary..."
                  ./download-agent.sh komari 386

            - name: Build release APKs (if signed)
              env:
                  KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
                  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
                  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
                  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
              run: |
                  if [ -n "$KEYSTORE_FILE" ]; then
                    echo "Keystore found, building signed release APKs..."
                    echo "$KEYSTORE_FILE" | base64 -d > keystore.jks
                    ./gradlew assembleRelease --stacktrace
                  else
                    echo "No keystore configured, skipping signed release build"
                  fi

            - name: List generated APKs
              run: |
                  echo "Release APKs:"
                  ls -la app/build/outputs/apk/release/

            - name: Upload release APKs
              if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
              uses: actions/upload-artifact@v4
              with:
                  name: release-apks
                  path: app/build/outputs/apk/release/*.apk

    release:
        needs: [build-release]
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download release APKs
              uses: actions/download-artifact@v5
              with:
                  name: release-apks
                  path: ./artifacts/

            - name: Get version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Prepare release files
              run: |
                  mkdir -p release-files

                  # Copy APKs
                  find artifacts -name "*.apk" -exec cp {} release-files \;

                  # List files for verification
                  echo "Downloaded artifacts:"
                  ls -la artifacts/
                  echo "Release files:"
                  ls -la release-files/

            - name: Generate release notes
              id: release_notes
              run: |
                  RELEASE_NOTES="
                  ### Installation
                  1. Download the appropriate APK for your device architecture
                  2. Install the APK (enable \"Install from unknown sources\" if needed)
                  3. Open the app and configure your server details
                  4. Grant necessary permissions when prompted
                  5. Toggle the \"Enable Agent\" switch to start monitoring

                  ### APK Variants
                  - universal - Contains all architectures, suitable for most devices
                  - arm64-v8a - Recommended for modern devices
                  - armeabi-v7a - For older devices  
                  - x86_64 - For 64-bit x86 devices
                  - x86 - For 32-bit x86 devices

                  ### Requirements
                  - Android 7.0 (API level 24) or higher
                  - Internet connection for server communication"

                  echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
                  echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ steps.version.outputs.VERSION }}
                  name: "Ulmaridae ${{ steps.version.outputs.VERSION }}"
                  body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
                  files: release-files/*
                  draft: false
                  prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    security-scan:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: "17"
                  distribution: "temurin"

            - name: Cache Gradle dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Make gradlew executable
              run: chmod +x gradlew
